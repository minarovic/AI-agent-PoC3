#!/usr/bin/env python3
"""
P≈ô√≠m√Ω test funkce analyze_query_sync bez z√°vislost√≠ na LangGraph.
"""

def test_analyze_query_sync_direct():
    """Test funkce analyze_query_sync p≈ô√≠mo ze souboru"""
    
    # Naƒçten√≠ obsahu analyzer.py
    with open('/Users/marekminarovic/AI-agent-Ntier/src/memory_agent/analyzer.py', 'r') as f:
        analyzer_content = f.read()
    
    print("=== Kontrola obsahu analyzer.py ===")
    
    # Hled√°n√≠ definice analyze_query_sync
    lines = analyzer_content.split('\n')
    
    found_function = False
    function_body = []
    inside_function = False
    
    for i, line in enumerate(lines, 1):
        if 'def analyze_query_sync(' in line:
            found_function = True
            inside_function = True
            function_body.append(f"{i}: {line}")
            print(f"‚úÖ Nalezena funkce analyze_query_sync na ≈ô√°dku {i}")
            continue
            
        if inside_function:
            # Ukonƒçen√≠ funkce = dal≈°√≠ def nebo konec souboru
            if line.strip().startswith('def ') and not line.strip().startswith('def analyze_query_sync'):
                inside_function = False
            else:
                function_body.append(f"{i}: {line}")
    
    if found_function:
        print("\n=== Obsah funkce analyze_query_sync ===")
        for line in function_body:
            print(line)
        
        # Kontrola, zda funkce vrac√≠ "company"
        function_code = '\n'.join([line.split(':', 1)[1] if ':' in line else line for line in function_body])
        
        if 'return "company"' in function_code:
            print("\n‚úÖ OVƒö≈òENO: Funkce obsahuje 'return \"company\"'")
            return True
        else:
            print("\n‚ùå PROBL√âM: Funkce neobsahuje 'return \"company\"'")
            return False
    else:
        print("‚ùå Funkce analyze_query_sync nebyla nalezena!")
        return False

def check_imports_in_analyzer():
    """Kontrola import≈Ø v analyzer.py"""
    with open('/Users/marekminarovic/AI-agent-Ntier/src/memory_agent/analyzer.py', 'r') as f:
        content = f.read()
    
    print("\n=== Kontrola import≈Ø v analyzer.py ===")
    
    # Problematick√© importy
    problematic_imports = [
        'from langchain_anthropic import ChatAnthropic',
        'from langchain_openai import ChatOpenAI'
    ]
    
    for import_line in problematic_imports:
        if import_line in content:
            print(f"‚ö†Ô∏è  NALEZEN: {import_line}")
        else:
            print(f"‚úÖ CHYB√ç: {import_line}")

if __name__ == "__main__":
    print("=== P≈ô√≠m√Ω test bez z√°vislost√≠ ===")
    
    # Test obsahu funkce
    success = test_analyze_query_sync_direct()
    
    # Kontrola import≈Ø
    check_imports_in_analyzer()
    
    if success:
        print(f"\n‚úÖ FUNKCE JE SPR√ÅVNƒö IMPLEMENTOV√ÅNA")
        print("üí° Probl√©m m≈Ø≈æe b√Ωt jinde nebo u≈æ je vy≈ôe≈°en")
    else:
        print(f"\n‚ùå FUNKCE NEN√ç SPR√ÅVNƒö IMPLEMENTOV√ÅNA")