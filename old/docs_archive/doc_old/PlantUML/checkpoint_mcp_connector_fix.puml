@startuml "Checkpoint-MCP-Problem"
!theme cerulean

title "Problém a řešení s MockMCPConnector a checkpointy"

skinparam {
  ArrowColor #2E74B5
  ActorBorderColor #2E74B5
  AgentBorderColor #2E74B5
  ActivityBorderColor #2E74B5
  LifeLineBorderColor #2E74B5
  ParticipantBorderColor #2E74B5
  
  ActivityBackgroundColor #F0F8FF
  ActorBackgroundColor #F0F8FF
  AgentBackgroundColor #F0F8FF
  LifeLineBackgroundColor #F0F8FF
  
  NoteBorderColor #A9DCDF
  NoteBackgroundColor #EBFAF9
}

actor "Uživatel" as User
participant "LangGraph\nWorkflow" as Graph
participant "Route\nQuery" as Route
participant "Prepare\nCompany Query" as Prepare
participant "Retrieve\nAdditional Data" as Retrieve
participant "Analyze\nCompany Data" as Analyze
database "Checkpointer\nMemorySaver" as Memory

== Problém: Ukládání neserializovatelného objektu ==

note over Prepare #FFAAAA
  Problém: 
  Ukládání instance MockMCPConnector do State
  - "mcp_connector": mcp_connector
end note

note over Retrieve #FFAAAA
  Problém:
  Opětovné ukládání MockMCPConnector
  a závislost na instanci ze State
end note

note over Graph #FFAAAA
  Problém:
  merge_dict_values() volá left.copy(),
  ale MockMCPConnector nemá metodu copy()
end note

User -> Graph: invoke(message, config={"thread_id": "1"})
Graph -> Route: route_query(state)
Route -> Prepare: prepare_company_query(state)
Prepare -> Graph: vrací stav s MockMCPConnector
Graph --> Memory: Pokus o serializaci stavu
Memory --> Graph: <font color=red><b>AttributeError: 'MockMCPConnector' object has no attribute 'copy'</b></font>

== Řešení: Odstranění neserializovatelných objektů ==

note over Prepare #AAFFAA
  Řešení: 
  Neukládat instanci MockMCPConnector do stavu
  return {
    "company_data": company_data
    # Bez mcp_connector
  }
end note

note over Retrieve #AAFFAA
  Řešení:
  Vždy vytvořit novou instanci
  mcp_connector = MockMCPConnector()
end note

note over Graph #AAFFAA
  Řešení:
  V merge_dict_values() ošetřit AttributeError
  try:
    result = left.copy()
  except AttributeError:
    result = {}
end note

User -> Graph: invoke(message, config={"thread_id": "1"})
Graph -> Route: route_query(state)
Route -> Prepare: prepare_company_query(state)
Prepare -> Graph: vrací stav bez MockMCPConnector
Prepare -> Retrieve: retrieve_additional_company_data(state)
Retrieve -> Retrieve: vytvoří novou instanci MockMCPConnector
Retrieve -> Analyze: analyze_company_data(state)
Analyze -> Graph: vrací výsledky analýzy
Graph --> Memory: Úspěšná serializace stavu
Memory --> Graph: Checkpoint úspěšně uložen

== Opakované volání se zachovaným kontextem ==

User -> Graph: invoke(message, config={"thread_id": "1"})
Graph -> Memory: Načtení stavu z checkpointu
Memory --> Graph: Předchozí stav s kontextem
Graph -> Route: route_query(state)
Route -> Prepare: prepare_company_query(state)
Prepare -> Retrieve: retrieve_additional_company_data(state)
Retrieve -> Retrieve: vytvoří novou instanci MockMCPConnector
Retrieve -> Analyze: analyze_company_data(state)
Analyze -> Graph: vrací výsledky analýzy s kontextem
Graph --> Memory: Úspěšná aktualizace checkpointu
Graph --> User: Odpověď s kontextem předchozích interakcí

@enduml
