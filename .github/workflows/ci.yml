name: Memory Agent CI

on:
  push:
    branches: [ main, master ]
    paths:
      - 'src/**/*.py'
      - 'requirements*.txt'
      - '.github/workflows/*.yml'
  pull_request:
    branches: [ main, master ]
    paths:
      - 'src/**/*.py'
      - 'requirements*.txt'

jobs:
  test:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    env:
      PYTHONPATH: "${{ github.workspace }}/src"
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Skip tests for deployment
      run: |
        echo "Tests temporarily disabled for minimal deployment"
        echo "Following instruction: 'Netestuj a neměň kód podle testů'"
        echo "Tests directory was moved to /old/tests_backup/"
        
    - name: Verify minimal setup
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        LANGSMITH_API_KEY: ${{ secrets.LANGSMITH_API_KEY }}
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        pip install -e .
        python -c "from memory_agent import graph; print('✅ Minimal setup validation passed')"

  lint:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Basic syntax check
      run: |
        python -m pip install --upgrade pip
        python -m pip install flake8
        
    - name: Check for critical errors only
      run: |
        flake8 src/ --count --select=E9,F63,F7,F82 --show-source --statistics

  validate-deployment:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    env:
      PYTHONPATH: "${{ github.workspace }}/src"
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .
    
    - name: Validate deployment configuration
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        LANGSMITH_API_KEY: ${{ secrets.LANGSMITH_API_KEY }}
      run: |
        # Kontrola, že nejsou přítomny testovací soubory
        if [ -d "sandbox" ]; then
          echo "ERROR: sandbox/ directory found in repository!"
          exit 1
        fi
        
        # Kontrola konfigurace LangGraph
        python -c "import json; f = open('langgraph.json'); config = json.load(f); f.close(); exit(0 if 'module' in config else 1)"
        
        # Ověření minimálního rozhraní - funkce analyze_company z nové verze analyzátoru
        python -c "from memory_agent.analyzer import analyze_company; print('✅ Successful import of analyze_company')"
