#!/usr/bin/env python
"""
Jednoduch√Ω test skript pro ovƒõ≈ôen√≠ podpory typ≈Ø anal√Ωz.

Tento skript testuje pouze z√°kladn√≠ funkce bez rozs√°hl√Ωch z√°vislost√≠.
"""

import os
import sys
import json
import re
import glob
import logging
from typing import Dict, Any, List, Optional, Tuple

# Nastaven√≠ logov√°n√≠
logging.basicConfig(level=logging.INFO, 
                   format="%(asctime)s - %(name)s - %(levelname)s - %(message)s")
logger = logging.getLogger("simple_test")

# Definice zn√°m√Ωch spoleƒçnost√≠ pro rychl√© vyhled√°n√≠
KNOWN_COMPANIES = {
    "MB TOOL": "risk_comparison",
    "≈†KODA AUTO": "general",
    "ADIS TACHOV": "risk_comparison", 
    "Fl√≠dr plast": "supplier_analysis",
    "BOS AUTOMOTIVE": "supplier_analysis",
    "BOS": "supplier_analysis",
    "FLIDR": "supplier_analysis",
    "Adis": "risk_comparison",
    "≈†koda": "general"
}

def detect_analysis_type(query: str) -> str:
    """
    Detekce typu anal√Ωzy na z√°kladƒõ kl√≠ƒçov√Ωch slov v dotazu.
    
    Args:
        query: Text u≈æivatelsk√©ho dotazu
        
    Returns:
        str: Zji≈°tƒõn√Ω typ anal√Ωzy
    """
    query = query.lower()
    
    # Kl√≠ƒçov√° slova pro detekci typu "risk_comparison"
    risk_keywords = [
        "risk", "rizik", "rizic", "compliance", "sanctions", "sankce", 
        "bezpeƒçnost", "security", "regulace", "regulation", "embargo"
    ]
    
    # Kl√≠ƒçov√° slova pro detekci typu "supplier_analysis"
    supplier_keywords = [
        "supplier", "dodavatel", "supply chain", "vztahy", "dod√°vky", 
        "tier", "odbƒõratel", "vendor", "n√°kup"
    ]
    
    if any(kw in query for kw in risk_keywords):
        logger.info(f"Detekov√°n typ anal√Ωzy \"risk_comparison\" pro dotaz: {query[:30]}...")
        return "risk_comparison"
    elif any(kw in query for kw in supplier_keywords):
        logger.info(f"Detekov√°n typ anal√Ωzy \"supplier_analysis\" pro dotaz: {query[:30]}...")
        return "supplier_analysis"
    else:
        logger.info(f"Detekov√°n v√Ωchoz√≠ typ anal√Ωzy \"general\" pro dotaz: {query[:30]}...")
        return "general"

def analyze_company_query(query: str) -> Tuple[str, str]:
    """
    Jednoduch√° funkce pro extrakci n√°zvu spoleƒçnosti a typu anal√Ωzy z dotazu.
    
    Args:
        query: U≈æivatelsk√Ω dotaz k anal√Ωze
        
    Returns:
        Tuple of (n√°zev_spoleƒçnosti, typ_anal√Ωzy)
    """
    # Kontrola zn√°m√Ωch spoleƒçnost√≠
    for company, analysis_type in KNOWN_COMPANIES.items():
        if company in query:
            logger.info(f"Nalezena zn√°m√° spoleƒçnost: {company}, typ anal√Ωzy: {analysis_type}")
            return company, analysis_type
    
    # Jednoduch√° extrakce pomoc√≠ regex - hled√°me velk√° p√≠smena n√°sledovan√° textem
    company_pattern = r"[A-Z][A-Za-z0-9\s\-]+"
    matches = re.findall(company_pattern, query)
    
    if matches:
        company = matches[0].strip()
        logger.info(f"Extrahov√°n n√°zev spoleƒçnosti pomoc√≠ regex: {company}")
    else:
        company = "Unknown Company"
        logger.warning("Nepoda≈ôilo se extrahovat n√°zev spoleƒçnosti z dotazu")
    
    # Detekce typu anal√Ωzy
    analysis_type = detect_analysis_type(query)
    
    return company, analysis_type

def test_analysis_types():
    """Test detekce typ≈Ø anal√Ωz a extrakce spoleƒçnost√≠."""
    logger.info("=== Test detekce typ≈Ø anal√Ωz a extrakce spoleƒçnost√≠ ===")
    
    test_queries = [
        # Dotazy pro risk_comparison
        "Jak√° jsou rizika pro MB TOOL?",
        "Compliance status for ADIS TACHOV",
        "M√° BOS AUTOMOTIVE nƒõjak√© sankce?",
        
        # Dotazy pro supplier_analysis
        "Kdo jsou dodavatel√© pro Fl√≠dr plast?",
        "Supply chain for BOS",
        "Uka≈æ mi tier 2 dodavatele pro ≈†KODA AUTO",
        
        # Dotazy pro general
        "Co je to MB TOOL?",
        "Informace o spoleƒçnosti ADIS TACHOV",
        "Tell me about BOS AUTOMOTIVE"
    ]
    
    for query in test_queries:
        logger.info(f"
Anal√Ωza dotazu: \"{query}\"")
        
        # Detekce typu anal√Ωzy
        analysis_type = detect_analysis_type(query)
        logger.info(f"- Detekovan√Ω typ anal√Ωzy: {analysis_type}")
        
        # Extrakce spoleƒçnosti a typu
        company, company_analysis = analyze_company_query(query)
        logger.info(f"- Extrahovan√° spoleƒçnost: {company}")
        logger.info(f"- P≈ôi≈ôazen√Ω typ anal√Ωzy: {company_analysis}")
        
        logger.info("-" * 40)

def main():
    """Hlavn√≠ funkce pro spu≈°tƒõn√≠ test≈Ø."""
    logger.info("üîç Zaƒç√≠n√°m testovat funkce pro anal√Ωzu typ≈Ø")
    
    # Test detekce typ≈Ø anal√Ωz
    test_analysis_types()
    
    logger.info("
‚úÖ V≈°echny testy dokonƒçeny")

if __name__ == "__main__":
    main()
